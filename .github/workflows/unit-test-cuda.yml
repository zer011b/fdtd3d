name: CI-unit-test-cuda

on:
  pull_request:
    branches: [ "master" ]

  push:
    branches:
      - master

  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:

  unit-test-cuda-grid:
    if: ${{ github.event_name != 'pull_request' || (github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'notest') != true) }}
    runs-on: ubuntu-latest
    name: Unit test x64 ubuntu 22.04 for cuda grid
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Ubuntu
        run: |
          sudo apt-get install nvidia-cuda-toolkit
          # Check if installation is successful by running the next line
          nvcc -V
      - name: Build and Run
        run: |
          ./Tools/test-units-cuda.sh ${GITHUB_WORKSPACE} ${GITHUB_WORKSPACE}/Build "${GITHUB_WORKSPACE}/Tools/UnitTests/cuda/build-and-run-unit-test-cuda-grid.sh" "gcc,g++" "RelWithDebInfo" "ON" "" "f d" "0,sm_50" "0"

  unit-test-cuda-internalscheme:
    if: ${{ github.event_name != 'pull_request' || (github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'notest') != true) }}
    strategy:
      fail-fast: false
      matrix:
        complex_values: [ON, OFF]
    runs-on: ubuntu-latest
    name: Unit test x64 ubuntu 22.04 for cuda internalscheme with COMPLEX_FIELD_VALUES=${{ matrix.complex_values }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Ubuntu
        run: |
          sudo apt-get install nvidia-cuda-toolkit
          # Check if installation is successful by running the next line
          nvcc -V
      - name: Build and Run
        run: |
          ./Tools/test-units-cuda.sh ${GITHUB_WORKSPACE} ${GITHUB_WORKSPACE}/Build "${GITHUB_WORKSPACE}/Tools/UnitTests/cuda/build-and-run-unit-test-internalscheme-cuda.sh" "gcc,g++" "RelWithDebInfo" "ON" "${{ matrix.complex_values }}" "f d" "0,sm_50" "0"

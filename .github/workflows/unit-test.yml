name: CI-unit-test

on:
  pull_request:
    branches: [ "master" ]

  push:
    branches:
      - master

  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:

  unit-test-parallel-grid:
    if: ${{ github.event_name != 'pull_request' || (github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'notest') != true) }}
    strategy:
      fail-fast: false
      matrix:
        cxx11: [ON, OFF]
    runs-on: ubuntu-latest
    name: Unit test x64 ubuntu 22.04 for parallel grid CXX11=${{ matrix.cxx11 }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Ubuntu
        run: |
          sudo apt install openmpi-bin openmpi-common libopenmpi-dev
      - name: Build and Run
        run: |
          ./Tools/test-units-mpi.sh ${GITHUB_WORKSPACE} ${GITHUB_WORKSPACE}/Build "${GITHUB_WORKSPACE}/Tools/UnitTests/mpi/build-and-run-unit-test-parallel-grid.sh" "gcc,g++" "RelWithDebInfo" "${{ matrix.cxx11 }}" "" ""

  unit-test-clock:
    if: ${{ github.event_name != 'pull_request' || (github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'notest') != true) }}
    runs-on: ubuntu-latest
    name: Unit test x64 ubuntu 22.04 for clock
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Ubuntu
        run: |
          sudo apt install openmpi-bin openmpi-common libopenmpi-dev
      - name: Build and Run
        run: |
          ./Tools/test-units-mpi.sh ${GITHUB_WORKSPACE} ${GITHUB_WORKSPACE}/Build "${GITHUB_WORKSPACE}/Tools/UnitTests/mpi/build-and-run-unit-test-clock.sh" "gcc,g++" "" "" "" ""

  unit-test-matrix-relwithdebinfo-and-debug:
    if: ${{ github.event_name != 'pull_request' || (github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'notest') != true) }}
    strategy:
      fail-fast: false
      matrix:
        name: [grid, dumpers-loaders, coordinate, settings, approximation, complex]
    runs-on: ubuntu-latest
    name: Unit test x64 ubuntu 22.04 for ${{ matrix.name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Ubuntu
        run: |
          sudo apt install openmpi-bin openmpi-common libopenmpi-dev
      - name: Build and Run
        run: |
          ./Tools/test-units.sh ${GITHUB_WORKSPACE} ${GITHUB_WORKSPACE}/Build "${GITHUB_WORKSPACE}/Tools/UnitTests/native/build-and-run-unit-test-${{ matrix.name }}.sh" "gcc,g++" "" "" "" "" ""

  unit-test-matrix-relwithdebinfo:
    if: ${{ github.event_name != 'pull_request' || (github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'notest') != true) }}
    strategy:
      matrix:
        name: [layout, internalscheme]
    runs-on: ubuntu-latest
    name: Unit test x64 ubuntu 22.04 for ${{ matrix.name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Ubuntu
        run: |
          sudo apt install openmpi-bin openmpi-common libopenmpi-dev
      - name: Build and Run
        run: |
          ./Tools/test-units.sh ${GITHUB_WORKSPACE} ${GITHUB_WORKSPACE}/Build "${GITHUB_WORKSPACE}/Tools/UnitTests/native/build-and-run-unit-test-${{ matrix.name }}.sh" "gcc,g++" "RelWithDebInfo" "" "" "" ""
